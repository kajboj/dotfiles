#!/usr/bin/ruby

session_name = 'development'

projects = {
  'quote_service' => %w(specqs vimqs qsc qss),
  'admin_portal'  => %w(specap vimap apc apc qss)
}

windows = {
  'spec'   => ['spec',  '~/shutl',  ''],

  'specqs' => ['spec',  '~/shutl/quote_service',  ''],
  'specap' => ['spec',  '~/shutl/admin_portal',  ''],

  'vim'    => ['vim',    '~/shutl', 'vim'],
  'vimqs'  => ['vim-qs', '~/shutl/quote_service', 'vim'],
  'vimap'  => ['vim-ap', '~/shutl/admin_portal',  'vim'],

  'aps'    => ['admin-portal-server',  '~/shutl/admin_portal',  'bundle exec rails server -p3000 --debugger'],
  'apc'    => ['admin-portal-console', '~/shutl/admin_portal',  'bundle exec rails console'],

  'qss'    => ['quote-service-server', '~/shutl/quote_service', 'bundle exec mizuno'],
  'qsc'    => ['quote-service-console', '~/shutl/quote_service', 'be irb -I app -r app/quote_service.rb -r spec/support/neo4j_helper_methods.rb'],

  'argoss' => ['argos-server',  '~/shutl/argos',  'bundle exec rails server -p3000 --debugger'],
  'argosc' => ['argos-console', '~/shutl/argos',  'bundle exec rails console'],

  'cps' => ['core-platform-server',  '~/shutl/core_platform',  'bundle exec rails server -p3001 --debugger'],
  'cpc' => ['core-platform-console', '~/shutl/core_platform',  'bundle exec rails console'],

  'redis' => ['redis', '~/shutl', 'redis-server ~/redis.conf; redis-cli'],
  'mysql' => ['MySQL', '~/shutl', 'mysql -uroot'],
}

def run_command(session_name, window_name, command)
  `tmux send-keys -t #{session_name}:#{window_name} '#{command}' C-m`
end

def new_window session_name, window_name, path, command
  return if hash_window? session_name, window_name

  `tmux new-window -t #{session_name} -d -n '#{window_name}'`

  run_command session_name, window_name, "cd #{path}"
  run_command session_name, window_name, command
end

def create_or_attach_session session_name
  `tmux has-session -t #{session_name}`
  unless $?.success?
    `tmux new-session -s #{session_name} -d`
  end
  yield
  `tmux attach -t #{session_name}`
end

def has_window? session_name, window_name
  windows = `tmux list-windows -t #{session_name} -F '\#{window_name}'`.split("\n")
  windows.include? window_name
end

a = ARGV[0]

if projects.keys.include?(a)
  create_or_attach_session(session_name) do
    projects[a].each do |window|
      new_window session_name, *windows[window]
    end
  end
elsif windows.keys.include?(a)
  create_or_attach_session(session_name) do
    new_window session_name,3*windows[a]
  end
else
  puts 'USAGE'
  puts '  tm [project|window]'
  puts
  puts "projects: #{projects.keys.join(', ')}"
  puts "windows: #{windows.keys.join(', ')}"
end
